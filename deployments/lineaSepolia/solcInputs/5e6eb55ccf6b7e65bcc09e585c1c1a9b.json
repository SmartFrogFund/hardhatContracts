{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SmartFrogFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract FrogFund is Ownable {\r\n    struct Project {\r\n        address payable creator; // 项目发起人\r\n        string title; // 项目标题\r\n        string description; // 项目描述\r\n        string link; // 项目链接\r\n        uint256 goalAmount; // 目标筹集金额\r\n        uint256 currentAmount; // 当前筹集金额\r\n        uint256 deadline; // 截止日期\r\n        bool completed; // 项目状态\r\n        uint256 currentProgress; // 0, 30, 50, 70, 100 项目进度\r\n    }\r\n\r\n    IERC20 public token;\r\n    uint256 public projectCount = 0;\r\n    // 存储项目进度详情和审核意见\r\n    mapping(uint256 => Project) public projects;\r\n    mapping(uint256 => mapping(address => uint256)) public contributions;\r\n    mapping(uint256 => string) public progressDetails;\r\n    mapping(uint256 => string) public approvalComments;\r\n\r\n    event ProjectCreated(\r\n        uint256 indexed projectId,\r\n        address indexed creator,\r\n        uint256 goalAmount,\r\n        uint256 deadline\r\n    );\r\n    event ProjectFunded(\r\n        uint256 indexed projectId,\r\n        address indexed supporter,\r\n        uint256 amount\r\n    );\r\n    event ProgressUpdated(\r\n        uint256 indexed projectId,\r\n        uint256 progress,\r\n        string details\r\n    );\r\n    event FundsDistributed(uint256 indexed projectId, uint256 amount);\r\n    event RefundIssued(\r\n        uint256 indexed projectId,\r\n        address indexed supporter,\r\n        uint256 amount\r\n    );\r\n    event ProgressReviewed(\r\n        uint256 indexed projectId,\r\n        string comment,\r\n        bool approved\r\n    );\r\n\r\n    constructor(address _tokenAddress) Ownable(msg.sender) {\r\n        token = IERC20(_tokenAddress);\r\n        transferOwnership(msg.sender);\r\n    }\r\n    function createProject(\r\n        string memory _title,\r\n        string memory _description,\r\n        string memory _link,\r\n        uint256 _goalAmount,\r\n        uint256 _deadline\r\n    ) external {\r\n        require(_goalAmount > 0, \"Goal amount must be greater than 0\");\r\n        require(_deadline > block.timestamp, \"Deadline must be in the future\");\r\n\r\n        projects[projectCount] = Project({\r\n            creator: payable(msg.sender),\r\n            title: _title,\r\n            description: _description,\r\n            link: _link,\r\n            goalAmount: _goalAmount,\r\n            currentAmount: 0,\r\n            deadline: _deadline,\r\n            completed: false,\r\n            currentProgress: 0\r\n        });\r\n\r\n        emit ProjectCreated(projectCount, msg.sender, _goalAmount, _deadline);\r\n        projectCount++;\r\n    }\r\n\r\n    function supportProject(uint256 _projectId, uint256 _amount) external {\r\n        // 这里要注意 投资人赞助时 需要前端给token进行授权\r\n        Project storage project = projects[_projectId];\r\n        require(\r\n            block.timestamp < project.deadline,\r\n            \"Project funding period is over\"\r\n        );\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        project.currentAmount += _amount;\r\n        contributions[_projectId][msg.sender] += _amount;\r\n\r\n        emit ProjectFunded(_projectId, msg.sender, _amount);\r\n    }\r\n\r\n    function updateProgress(\r\n        uint256 _projectId,\r\n        uint256 _progress,\r\n        string calldata _details\r\n    ) external {\r\n        Project storage project = projects[_projectId];\r\n        require(\r\n            msg.sender == project.creator,\r\n            \"Only project creator can update progress\"\r\n        );\r\n        require(\r\n            _progress == 30 ||\r\n                _progress == 50 ||\r\n                _progress == 70 ||\r\n                _progress == 100,\r\n            \"Invalid progress value\"\r\n        );\r\n        require(\r\n            _progress > project.currentProgress,\r\n            \"Progress must be greater than current progress\"\r\n        );\r\n\r\n        project.currentProgress = _progress;\r\n        progressDetails[_projectId] = _details;\r\n\r\n        emit ProgressUpdated(_projectId, _progress, _details);\r\n    }\r\n\r\n    function reviewProgress(\r\n        uint256 _projectId,\r\n        string calldata _comment,\r\n        bool _approved\r\n    ) external onlyOwner {\r\n        Project storage project = projects[_projectId];\r\n        require(project.currentProgress > 0, \"No progress to review\");\r\n\r\n        approvalComments[_projectId] = _comment;\r\n\r\n        if (_approved) {\r\n            uint256 amountToDistribute = (project.goalAmount *\r\n                project.currentProgress) / 100;\r\n            require(\r\n                token.transfer(project.creator, amountToDistribute),\r\n                \"Token transfer failed\"\r\n            );\r\n            emit FundsDistributed(_projectId, amountToDistribute);\r\n        } else {\r\n            project.currentProgress = 0;\r\n        }\r\n\r\n        emit ProgressReviewed(_projectId, _comment, _approved);\r\n    }\r\n\r\n    function distributeFunds(uint256 _projectId) external {\r\n        Project storage project = projects[_projectId];\r\n        require(\r\n            block.timestamp >= project.deadline,\r\n            \"Project is still ongoing\"\r\n        );\r\n        require(!project.completed, \"Funds already distributed\");\r\n\r\n        if (project.currentAmount >= project.goalAmount) {\r\n            require(\r\n                token.transfer(project.creator, project.currentAmount),\r\n                \"Token transfer failed\"\r\n            );\r\n            emit FundsDistributed(_projectId, project.currentAmount);\r\n        } else {\r\n            for (uint256 i = 0; i < projectCount; i++) {\r\n                uint256 contribution = contributions[_projectId][msg.sender];\r\n                if (contribution > 0) {\r\n                    contributions[_projectId][msg.sender] = 0;\r\n                    require(\r\n                        token.transfer(msg.sender, contribution),\r\n                        \"Refund transfer failed\"\r\n                    );\r\n                    emit RefundIssued(_projectId, msg.sender, contribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        project.completed = true;\r\n    }\r\n\r\n    function updateProject(\r\n        uint256 _projectId,\r\n        uint256 _newGoalAmount,\r\n        uint256 _newDeadline\r\n    ) external {\r\n        Project storage project = projects[_projectId];\r\n        require(\r\n            msg.sender == project.creator,\r\n            \"Only project creator can update\"\r\n        );\r\n        require(!project.completed, \"Project is already completed\");\r\n\r\n        if (_newGoalAmount > 0) {\r\n            project.goalAmount = _newGoalAmount;\r\n        }\r\n        if (_newDeadline > block.timestamp) {\r\n            project.deadline = _newDeadline;\r\n        }\r\n    }\r\n\r\n    function getProjectDetails(\r\n        uint256 _projectId\r\n    )\r\n        external\r\n        view\r\n        returns (address, uint256, uint256, uint256, bool, uint256)\r\n    {\r\n        Project storage project = projects[_projectId];\r\n        return (\r\n            project.creator,\r\n            project.goalAmount,\r\n            project.currentAmount,\r\n            project.deadline,\r\n            project.completed,\r\n            project.currentProgress\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}